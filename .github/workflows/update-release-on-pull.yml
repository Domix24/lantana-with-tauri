name: Update release on Pull Request

# description:
# - create a new release when a pull request is merged into default branch from a release branch

on:
  pull_request:
    branches: flower
    types: closed

jobs:
  get-release:
    if: github.event.pull_request.merged && startsWith(github.head_ref, 'release/')
    name: Get Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      id: ${{ steps.generate-release.outputs.id || steps.get-latest-release.outputs.id }}
      tag_name: ${{ steps.generate-release.outputs.tag_name || steps.get-latest-release.outputs.tag_name }}
    steps:      
      - id: get-latest-release
        name: Get latest release
        uses: actions/github-script@v7
        with:
          script: |
            const {data: releaseData} = await github.rest.repos.getLatestRelease({
              owner: context.repo.owner,
              repo: context.repo.repo
            })
            core.setOutput("id", releaseData.id)
            core.setOutput("tag_name", releaseData.tag_name)

      - id: get-version-from-branch-name
        name: Get version from branch name
        run: |
          release_branch_name="${{ github.head_ref }}"
          echo "version=${release_branch_name#*/}" >> "$GITHUB_OUTPUT"
      
      - id: generate-release
        name: Generate release
        uses: actions/github-script@v7
        with:
          script: |
            const {data: noteData} = await github.rest.repos.generateReleaseNotes({
              owner: context.repo.owner,
              repo: context.repo.repo,
              previous_tag_name: "${{ steps.get-latest-release.outputs.tag_name }}",
              tag_name: "v${{ steps.get-version-from-branch-name.outputs.version }}"
            })
            const {data: newReleaseData} = await github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: noteData.name,
              name: noteData.name,
              body: noteData.body
            })
            core.setOutput("id", newReleaseData.id)
            core.setOutput("tag_name", newReleaseData.tag_name)

  publish-tauri:
    name: Publish tauri
    needs: get-release
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'ubuntu-latest'
          - platform: 'windows-latest'

    runs-on: ${{ matrix.platform }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies (ubuntu only)
        if: matrix.platform == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ''

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: npm install

      - uses: tauri-apps/tauri-action@v0
        name: Tauri
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAURI_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_KEY_PASSWORD: ${{ secrets.TAURI_KEY_PASSWORD }}
        with:
          releaseId: ${{ needs.get-release.outputs.id }}
          tagName: ${{ needs.get-release.outputs.tag_name }}
          releaseBody: 'See the assets to download this version and install.'